package co.com.coomeva.sipas.core.model.sipasdb;



/**
 * AbstractSipVinculacionesClasificacionId generated by MyEclipse - Hibernate Tools
 */

public abstract class AbstractSipVinculacionesClasificacionId  implements java.io.Serializable {


    // Fields    

     private Long vinCod;
     private Long tipoVinculacion;


    // Constructors

    /** default constructor */
    public AbstractSipVinculacionesClasificacionId() {
    }

    
    /** full constructor */
    public AbstractSipVinculacionesClasificacionId(Long vinCod, Long tipoVinculacion) {
        this.vinCod = vinCod;
        this.tipoVinculacion = tipoVinculacion;
    }

   
    // Property accessors

    public Long getVinCod() {
        return this.vinCod;
    }
    
    public void setVinCod(Long vinCod) {
        this.vinCod = vinCod;
    }

    public Long getTipoVinculacion() {
        return this.tipoVinculacion;
    }
    
    public void setTipoVinculacion(Long tipoVinculacion) {
        this.tipoVinculacion = tipoVinculacion;
    }
   



   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof AbstractSipVinculacionesClasificacionId) ) return false;
		 AbstractSipVinculacionesClasificacionId castOther = ( AbstractSipVinculacionesClasificacionId ) other; 
         
		 return ( (this.getVinCod()==castOther.getVinCod()) || ( this.getVinCod()!=null && castOther.getVinCod()!=null && this.getVinCod().equals(castOther.getVinCod()) ) )
 && ( (this.getTipoVinculacion()==castOther.getTipoVinculacion()) || ( this.getTipoVinculacion()!=null && castOther.getTipoVinculacion()!=null && this.getTipoVinculacion().equals(castOther.getTipoVinculacion()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         result = 37 * result + ( getVinCod() == null ? 0 : this.getVinCod().hashCode() );
         result = 37 * result + ( getTipoVinculacion() == null ? 0 : this.getTipoVinculacion().hashCode() );
         return result;
   }   





}